
1. Assuming the XINU text begins at address 0x0, draw a rough diagram of XINU's memory layout with addresses derived from your experimental measurements.

Ans.
 
							--------------------
							|   	  	   |
							|   Free Memory    |
							|		   |
							|------------------| <-----0xffeff8(Base Pointer)
							| 		   |
							|   Main process   | <-----0xffeff8 (Base pointer)
							|	 	   | <-----0xffdffc (Limit)
							|------------------| <-----0xffef90 (Stack pointer)
							|         .        |
							|	  .        |  
							|         .        |
				 			|	  .	   |
							|	  .	   |
							|         .        |
							|	  .	   |
							|	  .	   |
							|------------------| 		
							|		   |
							|     	Heap       |
							|  		   |
							|------------------| <------0x0002b6b8
							|		   |
							|       Bss 	   |
							|		   |
							|------------------| <------0x0001e540
							|		   |
							|       Data       |
							|		   |
							|------------------| <------0x000191d7
							|		   |
							|       Text       |
							|	           | 
							-------------------- <------0x0 (start)	




2. What is the difference in stack top address before and after calling printtos()? Draw a diagram to illustrate what are the contents of the items pushed into the stack between these two time points.

Ans.

	Address of the top of the run-time stack before calling printtos() = 0x00ffeff4
	Address of the top of the run-time stack after calling printtos() = 0x00ffefec

	Therefore, the difference in stack top address before and aftercalling printtos() = 0x00ffeff4-0x00ffefec
											  
											  = 8 bytes

	The word length of stack is 32 bits or 4 bytes. Hence during the function call, 2 words are pushed into the stack. When a function is called, initailly the return address is pushed into the stack and then the base pointer of the previous process is saved.


 						        ---------------------  <-----0x00ffefa8(after)
							|		    | 
							|   previous ebp    |
							|		    |
							|-------------------|
							| 		    |
							|   Return address  |
							|  of function call |
							|		    | <----0x00ffefb0(before)
							---------------------




3. In a stack frame, local variables are stored below the top of the stack. In task 3, does your result show all the local variables declared in your printtos function? If not, can you explain that?

Ans. 
	No, the local variables declared in the printtos function is not stored below the top of the stack. This is beacause by default every program uses compiler optimisation. This allows the compiler minimize and maximize certain attributes of an executable program. Therefore it rearranges the local variables in the memory and are not as expected in the stack memory.  




